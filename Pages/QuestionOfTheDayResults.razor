@page "/QODResults"
@inject NavigationManager nav
@attribute [Authorize(Policy = "RequireCreation")]
@using DataAccess.Models
@using Microsoft.AspNetCore.Html
@using static System.Text.Encodings.Web.HtmlEncoder;
@using System.Collections.Generic
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@inject Testingstuff methods
@inherits OwningComponentBase<Testingstuff>
<h1>Question of the Day Results</h1>



<!--<label>Survey was open through:--> @*Begin and end dates*@<!--</label>-->
@{int k = 0;}
@for (int i = 0; i < getQOD().Length; i++)@*pass in QoTD id here*@
{
    @switch (theseresults[0].Item1)
    {
        case 1:
            //open ended, too many responses to display here, use a different page only for those with priviledges

            <div class="card-block">
                <h4 class="card-title">Question: @theseresults[0].Item2</h4>
            </div>
            <div class="card-block">
                <h4 class="card-text">Answers are open ended@*link to another page?*@<a href="/OpenResultsQotD?Value=@QOD.Item1&Title=@QOD.Item2">@QOD.Item2.ToUpper()</a></h4>
            </div>
            break;

        case 2:

            <div class="card-block">
                <h4 class="card-title">Question: @theseresults[0].Item2</h4>
            </div>

            <div class="card-block">
                <h4 class="card-text">True: @((float)Math.Round(((float)theseresults[0].Item3[0] / theseresults[0].Item3[2]) * 100))%</h4>
                <h4 class="card-text">False: @((float)Math.Round(((float)theseresults[0].Item3[1] / theseresults[0].Item3[2]) * 100))%</h4>
                <h4 class="card-text">Total Responses: @theseresults[0].Item3[2]</h4>
            </div>

            break;

        case 3:
            <div class="card-block">
                <h4 class="card-title">Question: @theseresults[0].Item2</h4>
            </div>


            <div class="card-block">
                @for (int j = 0; j < multiplechoicelist[k].Count(); j++)
                {
                    <h4 class="card-text"> @multiplechoicelist[k][j]: @theseresults[0].Item3[j]</h4>
                }
                @{k = k + 1;
                }
            </div>
            break;
    }
}






@code {

    System.Uri uri;
    int Value = 0;

    List<string> multiplechoicetext = new List<string>();
    List<List<string>> multiplechoicelist = new List<List<string>>();
    Tuple<int, string, int> QOD;

    protected override void OnInitialized()
    {
        uri = nav.ToAbsoluteUri(nav.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Value", out var value))
        {
            Value = int.Parse(value);
        }
        base.OnInitialized();
    }

    private Tuple<int, string, int[]>[] getQOD()
    {
        if (Value != 0)
        {
            QOD = methods.ViewQuestionsofTheDay(Value);
        }
        else
        {
            QOD = methods.ViewQuestionsofTheDay();
        }
        int i = 0;
        Tuple<int, string, int[]>[] results = new Tuple<int, string, int[]>[1];
        int[] response = new int[1];

        switch (QOD.Item3)
        {
            case 1:
                //since this part is open results of many responses, a seperate page should be used instead
                //response = methods.GetUserResponseOpen(sq.Item1);
                //check to make sure we dont need this code
                break;
            case 2:
                //take counted true/false responses and convert to percentage in html portion
                response = methods.GetUserTrueFalseResponses(QOD.Item1);
                //is there a method for GetUserTrueFalseResponses but for QotD?
                break;
            case 3:
                multiplechoicetext = methods.ViewMutipleChoiceQotD(QOD.Item1).ToList();
                multiplechoicelist.Add(multiplechoicetext);

                response = methods.GetUserResponseMutipleAnswersQotD(QOD.Item1, multiplechoicetext.Count());
                //text for multiple choice options is output in html portion, this portion only counts votes and outputs
                break;

        }
        results[i] = new Tuple<int, string, int[]>(QOD.Item3, QOD.Item2, response);
        i++;

        theseresults = results;
        return results;
    }
    private Tuple<int, string, int[]>[] theseresults;
}