@page "/Testing"
@attribute [Authorize(Policy ="RequireCreation")]
@using SurveyWebsite.Data
@using SurveyWebsite.Pages
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@inject Testingstuff ts
@inherits OwningComponentBase<Testingstuff>

<h3>Testing</h3>
<button class="btn btn-primary" @onclick="questionAdd"> addQuestion </button>

@code {


    private string user = "";

    protected override void OnInitialized()
    {
        if (_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            user = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
        }


        base.OnInitialized();
    }

    //example survey create
    //private void submitSurveyCreate()
    //{
    //    DateTime start = DateTime.Now;
    //    DateTime end = DateTime.Now;
    //    string name = "my First Survey";
    //    int[] qtype = new int[] { 1,2,3};
    //    string[] qtext = new string[] { "openeded", "trueFalse", "favoriteNumber" };
    //    string[] mutipleText = new string[] { "1", "2", "3", "4" };
    //    var surveyId = ts.AddSurvey(user, start, end, name);
    //    for(int i = 0; i<qtype.Length;i++)
    //    {
    //        if (qtype[i] != 3)
    //        {
    //            ts.SendQuestion(surveyId, qtext[i], qtype[i]);
    //        }
    //        else
    //        {
    //            ts.SendQuestionMultiple(surveyId, qtext[i], qtype[i], mutipleText);
    //        }
    //    }
    //}
    //private void submitSurveyResponse()
    //{
    //    string[] qtext = new string[] { "openeded", "trueFalse", "favoriteNumber" };
    //    string[] mutipleText = new string[] { "1", "2", "3", "4" };
    //    for(int i = 0; i<qtype.Length;i++)
    //    {
    //        if (qtype[i] != 3)
    //        {
    //            ts.SendQuestion(surveyId, qtext[i], qtype[i]);
    //        }
    //        else
    //        {
    //            ts.SendQuestionMultiple(surveyId, qtext[i], qtype[i], mutipleText);
    //        }
    //    }
    //}

    public void questionAdd()
    {



        //var survey = ts.AddSurvey(user, DateTime.Now, DateTime.Today, "genral Survey Name");
        //string[] arr = { "a", "n", "c" };
        //int open = ts.SendQuestion(survey, "words", 1);
        //int tfr = ts.SendQuestion(survey, "truefalse", 2);
        //int opennr = ts.SendQuestion(survey, "not reqired", 1, false);
        //int tfr2 = ts.SendQuestion(survey, "Required", 2, true);
        //int mut = ts.SendQuestionMultiple(survey, "what you like", 3, arr);
        //int qotdm = ts.SendQuestionMultipleQotD("QuestionotD", 3, DateTime.Now, DateTime.Today, arr, "testQofdM");
        //int qoftopen = ts.SendQuestionOfTheDay("day text", 1, DateTime.Now, DateTime.Today, "testQuestion");


        //ts.DeleteQuestion(open);

        //ts.DeleteQuestionQotD(13);
        //ts.DeleteMutipleChoiceText(mut);
        //ts.DeleteMutipleChoiceTextQotD(qotdm);
        //ts.DeleteSurvey(11);

        //write 2 functions to get mutiple choice stuff
        //works


        //ts.SendTrueFalseResponse(tfr, 1);
        //ts.SendMutipleResponse(mut, 1);
        //ts.SendMutipleResponseQotD(qotdm, 1);
        //ts.SendOpenededResponse(open, "hello");
        //ts.SendOpenededResponseQotD(qoftopen, "hello");

        //ts.SendUserTakenSurvey(user, survey);
        //var l = ts.ViewOrder();

        //var m = ts.ViewCreated(user);
        //var n = ts.ViewTaken(user);

        //var b = ts.GetAnswerText(mut);
        //var c = ts.GetAnswerTextQotD(qotdm);
        //var d = ts.GetQuestionText(open);
        //var e = ts.GetQuestionTextQotD(qoftopen);
        //var f = ts.GetUserOpenResponseQotD(qoftopen);
        //var g = ts.GetUserResponseMutipleAnswers(mut, 1);
        //var h = ts.GetUserResponseMutipleAnswersQotD(qotdm, 1);
        //var i = ts.GetUserResponseOpen(open);
        //var j = ts.GetUserTrueFalseResponses(tfr);
        //var k = ts.IsRequredAnswer(tfr2);
        //ts.UpdateQuestionTextQotD(qoftopen, "words for the words master");
        //ts.UpdateMutipleChoiceTextQotD(qotdm, "text for the text master");
        ////ts.UpdateMutipleChoiceText(mut, "here is new text");
        //ts.UpdateQuestionText(opennr, "this Is more text");
        //var questions = ts.ViewSurveyQuestions(13);

        var te = 3;

    }

}